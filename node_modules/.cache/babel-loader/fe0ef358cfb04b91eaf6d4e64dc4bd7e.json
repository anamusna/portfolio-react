{"ast":null,"code":"import _regeneratorRuntime from \"/home/dci-pc-ubuntu49/Desktop/my-portfolio/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/home/dci-pc-ubuntu49/Desktop/my-portfolio/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/home/dci-pc-ubuntu49/Desktop/my-portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/dci-pc-ubuntu49/Desktop/my-portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dci-pc-ubuntu49/Desktop/my-portfolio/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dci-pc-ubuntu49/Desktop/my-portfolio/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dci-pc-ubuntu49/Desktop/my-portfolio/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dci-pc-ubuntu49/Desktop/my-portfolio/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/dci-pc-ubuntu49/Desktop/my-portfolio/src/components/Work.js\";\nimport React from 'react';\nimport { RenderWork } from './RenderWork';\nvar key = process.env.REACT_APP_GitHubKey;\n\nvar Work =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Work, _React$Component);\n\n  function Work(props) {\n    var _this;\n\n    _classCallCheck(this, Work);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Work).call(this));\n    _this.fetchAsync =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var userGitHub, userGitHubData, enterpriseGitHub, enterpriseGitHubData, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch(\"https://api.github.com/users/\".concat(_this.state.githubName, \"/repos?sort=updated?client_id=36986708&client_secret=\").concat(key));\n\n            case 3:\n              userGitHub = _context.sent;\n              _context.next = 6;\n              return userGitHub.json();\n\n            case 6:\n              userGitHubData = _context.sent;\n              _context.next = 9;\n              return fetch(\"https://api.github.com/users/\".concat(_this.state.enterpriseGitHub, \"/repos?sort=updated?client_id=36986708&client_secret=\").concat(key));\n\n            case 9:\n              enterpriseGitHub = _context.sent;\n              _context.next = 12;\n              return enterpriseGitHub.json();\n\n            case 12:\n              enterpriseGitHubData = _context.sent;\n              data = _toConsumableArray(userGitHubData).concat(_toConsumableArray(enterpriseGitHubData));\n\n              _this.state.projectsID.map(function (id) {\n                return _this.findProjects(data, id);\n              });\n\n              _context.next = 20;\n              break;\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](0);\n              console.log('Error', _context.t0);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 17]]);\n    }));\n\n    _this.findProjects = function (data, id) {\n      data.map(function (repo) {\n        if (id === repo.id) {\n          _this.setState(function (prevState) {\n            return {\n              projects: _toConsumableArray(prevState.projects).concat([{\n                name: repo.name,\n                repoURL: repo.html_url,\n                description: repo.description,\n                homepage: repo.homepage,\n                owner: repo.owner.login,\n                ownerURL: repo.owner.html_url\n              }])\n            };\n          });\n        }\n      });\n    };\n\n    _this.state = {\n      githubName: props.githubName,\n      enterpriseGitHub: props.enterpriseGitHub,\n      projectsID: props.projectsID,\n      projects: []\n    };\n    return _this;\n  }\n\n  _createClass(Work, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchAsync();\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(prevState, nextState) {\n      if (nextState.projects.length === nextState.projectsID.length) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        className: \"work\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"My Expertise\"), React.createElement(\"div\", {\n        className: \"work-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"In my sort carreer as full stack JS developer I build some SPA (Single Page Applications) using HTML5,CSS3+, JS (ES6, ES7) with React or JQuery as front-end libraries and with Node.js and Express as back-end engine with MySQL or MongoDB for storing data.\")), this.state.projects.map(function (project, index) {\n        return React.createElement(RenderWork, {\n          key: index,\n          index: index,\n          name: project.name,\n          link: project.repoURL,\n          description: project.description,\n          liveURL: project.homepage,\n          owner: project.owner,\n          ownerURL: project.ownerURL,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return Work;\n}(React.Component);\n\nexport { Work as default };","map":{"version":3,"sources":["/home/dci-pc-ubuntu49/Desktop/my-portfolio/src/components/Work.js"],"names":["React","RenderWork","key","process","env","REACT_APP_GitHubKey","Work","props","fetchAsync","fetch","state","githubName","userGitHub","json","userGitHubData","enterpriseGitHub","enterpriseGitHubData","data","projectsID","map","id","findProjects","console","log","repo","setState","prevState","projects","name","repoURL","html_url","description","homepage","owner","login","ownerURL","nextState","length","project","index","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { RenderWork } from './RenderWork';\n\nconst key = process.env.REACT_APP_GitHubKey\n\nexport default class Work extends React.Component {\n  constructor(props) {\n    super()\n    this.state = {\n      githubName: props.githubName,\n      enterpriseGitHub: props.enterpriseGitHub,\n      projectsID: props.projectsID,\n      projects: [],\n    }\n  }\n\n  fetchAsync = async () => {\n    try {\n      const userGitHub = await fetch(`https://api.github.com/users/${this.state.githubName}/repos?sort=updated?client_id=36986708&client_secret=${key}`);\n      const userGitHubData = await userGitHub.json();\n      const enterpriseGitHub = await fetch(`https://api.github.com/users/${this.state.enterpriseGitHub}/repos?sort=updated?client_id=36986708&client_secret=${key}`);\n      const enterpriseGitHubData = await enterpriseGitHub.json();\n      const data = [...userGitHubData, ...enterpriseGitHubData]\n      this.state.projectsID.map(id => this.findProjects(data, id))\n    }\n    catch (error) {\n      console.log('Error', error);\n    }\n  }\n\n  findProjects = (data, id) => {\n    data.map(repo => {\n      if (id === repo.id) {\n        this.setState(prevState => { return { projects: [...prevState.projects, { name: repo.name, repoURL: repo.html_url, description: repo.description, homepage: repo.homepage, owner: repo.owner.login, ownerURL: repo.owner.html_url }] } })\n      }\n    })\n  }\n\n  componentDidMount() {\n    this.fetchAsync();\n  }\n\n  shouldComponentUpdate(prevState, nextState) {\n    if (nextState.projects.length === nextState.projectsID.length) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <section className=\"work\">\n          <h1>My Expertise</h1>\n          <div className=\"work-text\">\n            <p>In my sort carreer as full stack JS developer I build some SPA (Single Page Applications) using HTML5,CSS3+, JS (ES6, ES7) with React or JQuery as front-end libraries and with Node.js and Express as back-end engine with MySQL or MongoDB for storing data.</p>\n          </div>\n          {this.state.projects.map((project, index) => <RenderWork key={index} index={index} name={project.name} link={project.repoURL} description={project.description} liveURL={project.homepage} owner={project.owner} ownerURL={project.ownerURL} />)}\n        </section>\n      </React.Fragment>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}